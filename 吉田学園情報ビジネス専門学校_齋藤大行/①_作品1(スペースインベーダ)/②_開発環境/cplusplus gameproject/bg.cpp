//= == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
//
// 背景処理 [bg.cpp]
// Author :齋藤大行
//
//=============================================================================

//=============================================================================
//インクルードファイル
//=============================================================================
#include "bg.h"
#include "manager.h"
#include "renderer.h"

//=============================================================================
//静的メンバー変数
//=============================================================================
LPDIRECT3DTEXTURE9 CBg::m_pTexture[MAX_TEXTURE] = {};

//=============================================================================
//コンストラクタ
//=============================================================================
CBg::CBg() :CScene(0)
{
	memset(m_apScene2d, 0, sizeof(m_apScene2d));
}

//=============================================================================
//デストラクタ
//=============================================================================
CBg::~CBg()
{
}

//=============================================================================
//テクスチャロード関数
//=============================================================================
HRESULT CBg::Load(void)
{

	LPDIRECT3DDEVICE9 pDevice = NULL;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
		TEXTURE_NAME4,					// ファイルの名前
		&m_pTexture[0]);									// 読み込むメモリー

															// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
		TEXTURE_NAME5,					// ファイルの名前
		&m_pTexture[1]);									// 読み込むメモリー

															// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
		TEXTURE_NAME6,					// ファイルの名前
		&m_pTexture[2]);									// 読み込むメモリー

															// テクスチャの生成

	return S_OK;
}

//=============================================================================
//テクスチャアンロード関数
//=============================================================================
void CBg::Unload(void)
{
	for (int nCount = 0; nCount < MAX_TEXTURE; nCount++)
	{
		if (m_pTexture != NULL)
		{
			m_pTexture[nCount]->Release();
			m_pTexture[nCount] = NULL;
		}
	}

}

//=============================================================================
//生成処理関数
//=============================================================================
CBg * CBg::Create(void)
{
	CBg * pBg;					//ポインタ
	pBg = new CBg;				//インスタンス生成
   	pBg->Init();				//初期化処理関数
	pBg->SetObjType(TYPE_BG);	//タイプ設定
	
	return pBg;
}

//=============================================================================
//生成処理関数
//=============================================================================
HRESULT CBg::Init(void)
{	
	for (int nCount = 0; nCount < MAX_TEXTURE; nCount++)
	{
		m_apScene2d[nCount] = new CScene2d;		
		m_apScene2d[nCount]->Init();
		m_apScene2d[nCount]->SetPosition(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2,0.0f));
		m_apScene2d[nCount]->SetClo(D3DXCOLOR(NONE_CLO, NONE_CLO, NONE_CLO, NONE_CLO));
		m_apScene2d[nCount]->SetSize(SCREEN_WIDTH, SCREEN_HEIGHT);
		m_apScene2d[nCount]->SetTexture();
		m_apScene2d[nCount]->BindTexture(m_pTexture[nCount]);	

	}
	
	return S_OK;
}

//=============================================================================
//終了処理関数
//=============================================================================
void CBg::Uninit(void)
{
	for (int nCount = 0; nCount < MAX_TEXTURE; nCount++)
	{
		m_apScene2d[nCount]->Uninit();
		m_apScene2d[nCount] = NULL;
	}


	Release();
}

//=============================================================================
//更新処理関数
//=============================================================================
void CBg::Update(void)
{

}

//=============================================================================
//描画処理関数
//=============================================================================
void CBg::Draw(void)
{

}
