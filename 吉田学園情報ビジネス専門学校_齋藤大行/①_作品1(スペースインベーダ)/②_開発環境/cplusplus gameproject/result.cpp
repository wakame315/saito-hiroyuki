//=============================================================================
//
// リザルト処理 [result.cpp]
// Author : 齋藤大行
//
//=============================================================================

//=============================================================================
//インクルードファイル
//=============================================================================
#include "result.h"
#include "scene2d.h"
#include "manager.h"
#include "renderer.h"

//=============================================================================
//静的メンバー変数
//=============================================================================
LPDIRECT3DTEXTURE9 CResult::m_pTexture[RESULT_TEXTURE] = {};
bool CResult::m_bClear = false;

//=============================================================================
//コンストラクタ
//=============================================================================
CResult::CResult(int nPriority)
{
	m_apScene2d = NULL;
	
}

//=============================================================================
//デストラクタ
//=============================================================================
CResult::~CResult()
{
}

//=============================================================================
//テクスチャロード関数
//=============================================================================
HRESULT CResult::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,			// デバイスへのポインタ
		TEXTURE_NAME15,								// ファイルの名前
		&m_pTexture[0]);

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,			// デバイスへのポインタ
		TEXTURE_NAME16,								// ファイルの名前
		&m_pTexture[1]);

	return S_OK;
}

//=============================================================================
//テクスチャアンロード関数
//=============================================================================
void CResult::Unload(void)
{
	for (int nCount = 0; nCount < RESULT_TEXTURE; nCount++)
	{
		if (m_pTexture[nCount] != NULL)
		{
			m_pTexture[nCount]->Release();
			m_pTexture[nCount] = NULL;
		}
	}
}

//=============================================================================
//生成処理関数
//=============================================================================
CResult * CResult::Create(void)
{
	CResult *pResult;		//ポインタ
	pResult = new CResult;	//インスタンス生成
	pResult->Init();		//初期化処理

	return pResult;
}

//=============================================================================
//クリア判定設定
//=============================================================================
void CResult::SetClear(bool Clear)
{
	m_bClear = Clear;
}

//=============================================================================
//初期化処理関数
//=============================================================================
HRESULT CResult::Init(void)
{
	m_apScene2d = new CScene2d;																//インスタンス生成
	m_apScene2d->Init();																	//初期化処理
	m_apScene2d->SetPosition(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f));		//位置設定
	m_apScene2d->SetClo(D3DXCOLOR(NONE_CLO, NONE_CLO, NONE_CLO, NONE_CLO));					//色設定
	m_apScene2d->SetSize(SCREEN_WIDTH, SCREEN_HEIGHT);										//サイズ設定
	m_apScene2d->SetObjType(CScene::TYPE_RESULT);											//オブジェクト設定
	m_apScene2d->SetTexture();																//テクスチャ設定
	
	//リザルトの画面判定
	if (m_bClear)
	{	//ゲームクリアの時
		m_apScene2d->BindTexture(m_pTexture[0]);
	}
	else
	{	//ゲームオーバーの時
		m_apScene2d->BindTexture(m_pTexture[1]);
	}

	return S_OK;
}

//=============================================================================
//終了処理関数
//=============================================================================
void CResult::Uninit(void)
{
	//終了処理
	m_apScene2d->Uninit();
	m_apScene2d = NULL;
}

//=============================================================================
//更新処理関数
//=============================================================================
void CResult::Update(void)
{
}

//=============================================================================
//描画処理関数
//=============================================================================
void CResult::Draw(void)
{
	//描画処理
	m_apScene2d->Draw();
}
